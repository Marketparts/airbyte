{
  "documentationUrl": "https://docsurl.com",
  "connectionSpecification": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Neo4j Entity Spec",
    "type": "object",
    "required": ["scheme", "host", "port", "username", "password", "enable_dynamic_schemas"],
    "additionalProperties": false,
    "properties": {
      "scheme": {
        "description": "Uri connection scheme.",
        "type": "string",
        "enum": ["bolt", "neo4j"],
        "order": 0
      },
      "host": {
        "description": "Hostname of the database.",
        "type": "string",
        "order": 1
      },
      "port": {
        "description": "Port of the database.",
        "type": "integer",
        "minimum": 0,
        "maximum": 65536,
        "default": 7687,
        "examples": ["7687"],
        "order": 2
      },
      "database": {
        "description": "Name of the database. Leave it empty for default database or if your version of Neo4j is prior to 4.0.",
        "type": "string",
        "examples": ["neo4j"],
        "order": 3
      },
      "username": {
        "description": "Username to use to access the database.",
        "type": "string",
        "order": 4
      },
      "password": {
        "description": "Password associated with the username.",
        "type": "string",
        "airbyte_secret": true,
        "order": 5
      },
      "enable_dynamic_schemas": {
        "type": "boolean",
        "title": "Dynamically fetch node/relationship schemas from database.",
        "description": "If enabled, node/relatonship schemas are generated dynamically from a sample of the database. This query execution time depends on the volumetry of the database.",
        "order": 6,
        "default": false
      },
      "custom_streams": {
        "type": "string",
        "title": "Custom streams",
        "description": "Custom stream to sync data with cypher queries",
        "order": 7,
        "examples": ["{\"my_stream_name\": {\"match_query\": \"MATCH (A)-[:rel]->(B)\", \"return_query\": \"RETURN A, B.primary_key\", \"cursor_field\": \"A.timestamp\"}}"]
      },
      "json_schemas": {
        "type": "string",
        "title": "JSON Schemas",
        "description": "JSON Schemas for node/relationship (if auto fetch is disabled) or custom streams",
        "order": 7,
        "examples": ["{\"node_label_1\": {\"prop_1\":{\"type\":\"integer\"}}}"]
      },
      "incremental_sync_settings": {
        "type": "string",
        "title": "Incremental sync settings for streams",
        "description": "Settings for streams to be sync in incremental mode. To set default settings for all streams, user DEFAULT keyword as the stream name.",
        "order": 8,
        "examples": ["{\"DEFAULT\": {\"checkpointing_mode\": \"interval\", \"state_checkpoint_interval\": 1000}, \"my_stream_name\": {\"checkpointing_mode\": \"slices\", \"slices_count_per_incremental_sync\": 10, \"max_records_per_incremental_sync\": 1000000}}"]
      },
      "replication_method": {
        "type": "string",
        "title": "Replication Method",
        "description": "Replication method to use for extracting data from the database. STANDARD replication requires no setup on the DB side but will not be able to represent deletions incrementally. CDC uses the Binlog to detect inserts, updates, and deletes. This needs to be configured on the source database itself.",
        "order": 9,
        "default": "STANDARD",
        "enum": ["STANDARD"]
      }
    }
  }
}
